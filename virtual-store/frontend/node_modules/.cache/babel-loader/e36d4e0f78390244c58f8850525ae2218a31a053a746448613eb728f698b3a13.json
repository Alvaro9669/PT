{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramir\\\\Documents\\\\CodigoPT\\\\PWeb\\\\virtual-store\\\\frontend\\\\src\\\\components\\\\PaypalButton.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport './PaypalButton.css'; // Agrega estilos para el popup\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaypalButton = ({\n  total\n}) => {\n  _s();\n  const [popupMessage, setPopupMessage] = useState(null); // Estado para el mensaje emergente\n  const [popupType, setPopupType] = useState(''); // Estado para el tipo de mensaje (success o error)\n\n  const initialOptions = {\n    \"client-id\": \"AW4xEijNfSBJiSYtmMdYrfi3hdsva55HqfU45shxQn0f_RM4WUc-dNdjmw_XZ2fIDPrbvqZQZBSy4fQn\",\n    // Reemplaza con tu Client ID\n    currency: \"MXN\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [popupMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `popup ${popupType}`,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: popupMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: initialOptions,\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          layout: \"vertical\"\n        },\n        createOrder: (data, actions) => {\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: total.toFixed(2) // Total del carrito\n              }\n            }]\n          });\n        },\n        onApprove: async (data, actions) => {\n          try {\n            // Convertir el total a flotante antes de enviarlo\n            const totalFloat = parseFloat(total);\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/paypal/capture-order`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              credentials: 'include',\n              // Asegurarse de que las cookies se envíen\n              body: JSON.stringify({\n                orderId: data.orderID,\n                total: totalFloat\n              }) // Enviar el total calculado\n            });\n            if (!response.ok) {\n              const errorResult = await response.json();\n              setPopupMessage(errorResult.message || 'Error al procesar el pago.');\n              setPopupType('error'); // Tipo de mensaje: error\n              setTimeout(() => setPopupMessage(null), 2000); // Ocultar popup después de 2 segundos\n              return;\n            }\n            const result = await response.json();\n            console.log('Respuesta del backend:', result);\n            if (result.success) {\n              setPopupMessage('Pago completado exitosamente');\n              setPopupType('success'); // Tipo de mensaje: éxito\n              setTimeout(() => {\n                setPopupMessage(null);\n                window.location.href = 'http://192.168.1.116:3000/carrito'; // Redirigir al carrito\n              }, 2000);\n            } else {\n              setPopupMessage(result.message || 'El pago no se completó.');\n              setPopupType('error'); // Tipo de mensaje: error\n              setTimeout(() => setPopupMessage(null), 2000);\n            }\n          } catch (error) {\n            console.error('Error al capturar el pago:', error);\n            setPopupMessage('Hubo un error al procesar el pago.');\n            setPopupType('error'); // Tipo de mensaje: error\n            setTimeout(() => setPopupMessage(null), 2000);\n          }\n        },\n        onError: err => {\n          console.error('Error en el pago:', err);\n          setPopupMessage('Hubo un error al procesar el pago.');\n          setPopupType('error'); // Tipo de mensaje: error\n          setTimeout(() => setPopupMessage(null), 2000);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n_s(PaypalButton, \"4yZOsNNjF1iQs2uBeNbG4TZVgbU=\");\n_c = PaypalButton;\nexport default PaypalButton;\nvar _c;\n$RefreshReg$(_c, \"PaypalButton\");","map":{"version":3,"names":["React","useState","PayPalScriptProvider","PayPalButtons","jsxDEV","_jsxDEV","PaypalButton","total","_s","popupMessage","setPopupMessage","popupType","setPopupType","initialOptions","currency","children","className","fileName","_jsxFileName","lineNumber","columnNumber","options","style","layout","createOrder","data","actions","order","create","purchase_units","amount","value","toFixed","onApprove","totalFloat","parseFloat","response","fetch","process","env","REACT_APP_BACKEND_URL","method","headers","credentials","body","JSON","stringify","orderId","orderID","ok","errorResult","json","message","setTimeout","result","console","log","success","window","location","href","error","onError","err","_c","$RefreshReg$"],"sources":["C:/Users/ramir/Documents/CodigoPT/PWeb/virtual-store/frontend/src/components/PaypalButton.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\r\nimport './PaypalButton.css'; // Agrega estilos para el popup\r\n\r\nconst PaypalButton = ({ total }) => {\r\n    const [popupMessage, setPopupMessage] = useState(null); // Estado para el mensaje emergente\r\n    const [popupType, setPopupType] = useState(''); // Estado para el tipo de mensaje (success o error)\r\n\r\n    const initialOptions = {\r\n        \"client-id\": \"AW4xEijNfSBJiSYtmMdYrfi3hdsva55HqfU45shxQn0f_RM4WUc-dNdjmw_XZ2fIDPrbvqZQZBSy4fQn\", // Reemplaza con tu Client ID\r\n        currency: \"MXN\",\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Contenedor del popup */}\r\n            {popupMessage && (\r\n                <div className={`popup ${popupType}`}>\r\n                    <p>{popupMessage}</p>\r\n                </div>\r\n            )}\r\n\r\n            <PayPalScriptProvider options={initialOptions}>\r\n                <PayPalButtons\r\n                    style={{ layout: \"vertical\" }}\r\n                    createOrder={(data, actions) => {\r\n                        return actions.order.create({\r\n                            purchase_units: [\r\n                                {\r\n                                    amount: {\r\n                                        value: total.toFixed(2), // Total del carrito\r\n                                    },\r\n                                },\r\n                            ],\r\n                        });\r\n                    }}\r\n                    onApprove={async (data, actions) => {\r\n                        try {\r\n                            // Convertir el total a flotante antes de enviarlo\r\n                            const totalFloat = parseFloat(total);\r\n                            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/paypal/capture-order`, {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                credentials: 'include', // Asegurarse de que las cookies se envíen\r\n                                body: JSON.stringify({ orderId: data.orderID, total: totalFloat }), // Enviar el total calculado\r\n                            });\r\n\r\n                            if (!response.ok) {\r\n                                const errorResult = await response.json();\r\n                                setPopupMessage(errorResult.message || 'Error al procesar el pago.');\r\n                                setPopupType('error'); // Tipo de mensaje: error\r\n                                setTimeout(() => setPopupMessage(null), 2000); // Ocultar popup después de 2 segundos\r\n                                return;\r\n                            }\r\n\r\n                            const result = await response.json();\r\n                            console.log('Respuesta del backend:', result);\r\n\r\n                            if (result.success) {\r\n                                setPopupMessage('Pago completado exitosamente');\r\n                                setPopupType('success'); // Tipo de mensaje: éxito\r\n                                setTimeout(() => {\r\n                                    setPopupMessage(null);\r\n                                    window.location.href = 'http://192.168.1.116:3000/carrito'; // Redirigir al carrito\r\n                                }, 2000);\r\n                            } else {\r\n                                setPopupMessage(result.message || 'El pago no se completó.');\r\n                                setPopupType('error'); // Tipo de mensaje: error\r\n                                setTimeout(() => setPopupMessage(null), 2000);\r\n                            }\r\n                        } catch (error) {\r\n                            console.error('Error al capturar el pago:', error);\r\n                            setPopupMessage('Hubo un error al procesar el pago.');\r\n                            setPopupType('error'); // Tipo de mensaje: error\r\n                            setTimeout(() => setPopupMessage(null), 2000);\r\n                        }\r\n                    }}\r\n                    onError={(err) => {\r\n                        console.error('Error en el pago:', err);\r\n                        setPopupMessage('Hubo un error al procesar el pago.');\r\n                        setPopupType('error'); // Tipo de mensaje: error\r\n                        setTimeout(() => setPopupMessage(null), 2000);\r\n                    }}\r\n                />\r\n            </PayPalScriptProvider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PaypalButton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}